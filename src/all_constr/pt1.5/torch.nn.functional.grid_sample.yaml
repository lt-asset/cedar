check_nan: true
constraints:
  align_corners:
    default: None
    descp: 'Geometrically, we consider the pixels of the input  as squares rather
      than points. If set to `True`, the extrema (`-1` and `1`) are considered as
      referring to the center points of the input''s corner pixels. If set to `False`,
      they are instead considered as referring to the corner points of the input''s
      corner pixels, making the sampling more resolution agnostic. This option parallels
      the `align_corners` option in `interpolate()`, and so whichever option is used
      here should also be used there to resize the input image before grid sampling.
      Default: `False`'
    doc_dtype: bool, optional
    dtype:
    - torch.bool
    ndim:
    - '0'
  grid:
    descp: flow-field of shape (N, H_out, W_out, 2)  (4-D case) or (N, D_out, H_out,
      W_out, 3)  (5-D case)
    doc_dtype: Tensor
    tensor_t:
    - torch.tensor
  input:
    descp: input of shape (N, C, H_in, W_in)  (4-D case) or (N, C, D_in, H_in, W_in)  (5-D
      case)
    doc_dtype: Tensor
    tensor_t:
    - torch.tensor
  mode:
    default: bilinear
    descp: 'interpolation mode to calculate output values `''bilinear''` | `''nearest''`.
      Default: `''bilinear''`'
    doc_dtype: str
    dtype:
    - string
    enum:
    - bilinear
    - nearest
  padding_mode:
    default: zeros
    descp: 'padding mode for outside grid values `''zeros''` | `''border''` | `''reflection''`.
      Default: `''zeros''`'
    doc_dtype: str
    dtype:
    - string
    enum:
    - border
    - reflection
    - zeros
inputs:
  optional:
  - mode
  - padding_mode
  - align_corners
  required:
  - input
  - grid
link: https://pytorch.org/docs/stable/nn.functional.html#torch.nn.functional.grid_sample
package: torch
target: grid_sample
title: torch.nn.functional.grid_sample
version: 1.5.0
