constraints:
  check_inputs:
    default: None
    descp: A list of tuples of input arguments that should be used to check the trace
      against what is expected. Each tuple is equivalent to a set of input arguments
      that would be specified in `example_inputs`. For best results, pass in a set
      of checking inputs representative of the space of shapes and types of inputs
      you expect the network to see. If not specified, the original `example_inputs`
      are used for checking
    doc_dtype: list of tuples, optional
    dtype:
    - torch.bool
    ndim:
    - '0'
    structure:
    - list
  check_tolerance:
    default: 1e-5
    descp: Floating-point comparison tolerance to use in the checker procedure. This
      can be used to relax the checker strictness in the event that results diverge
      numerically for a known reason, such as operator fusion.
    doc_dtype: float, optional
    dtype:
    - torch.bool
    - torch.float32
    ndim:
    - '0'
  check_trace:
    default: 'True'
    descp: 'Check if the same inputs run through traced code produce the same outputs.
      Default: `True`. You might want to disable this if, for example, your network
      contains non- deterministic ops or if you are sure that the network is correct
      despite a checker failure.'
    doc_dtype: bool, optional
    dtype:
    - torch.bool
    ndim:
    - '0'
  example_inputs:
    descp: A tuple of example inputs that will be passed to the function while tracing.
      The resulting trace can be run with inputs of different types and shapes assuming
      the traced operations support those types and shapes. `example_inputs` may also
      be a single Tensor in which case it is automatically wrapped in a tuple.
    doc_dtype: tuple
    structure:
    - tuple
    tensor_t:
    - torch.tensor
  func:
    descp: A Python function or `torch.nn.Module` that will be run with `example_inputs`.
      arguments and returns to `func` must be tensors or (possibly nested) tuples
      that contain tensors. When a module is passed to `torch.jit.trace`, only the
      `forward` method is run and traced (see `torch.jit.trace` for details).
    doc_dtype: callable or torch.nn.Module
    tensor_t:
    - torch.tensor
  optimize:
    default: None
    descp: ''
inputs:
  optional:
  - optimize
  - check_trace
  - check_inputs
  - check_tolerance
  required:
  - func
  - example_inputs
link: https://pytorch.org/docs/stable/jit.html#torch.jit.trace
package: torch
target: trace
title: torch.jit.trace
version: 1.5.0
