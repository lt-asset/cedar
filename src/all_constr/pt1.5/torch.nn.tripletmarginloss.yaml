check_nan: true
constraints:
  eps:
    default: 1e-06
    descp: ''
    dtype:
    - torch.float32
    ndim:
    - '0'
  margin:
    default: '1.0'
    descp: 'Default: 1 .'
    doc_dtype: float, optional
    dtype:
    - int
    - torch.float32
    ndim:
    - '0'
  p:
    default: '2.0'
    descp: 'The norm degree for pairwise distance. Default: 2 .'
    doc_dtype: int, optional
    dtype:
    - int
    - torch.float32
    ndim:
    - '0'
  reduce:
    default: None
    descp: 'Deprecated (see `reduction`). By default, the losses are averaged or summed
      over observations for each minibatch depending on `size_average`. When `reduce`
      is `False`, returns a loss per batch element instead and ignores `size_average`.
      Default: `True`'
    doc_dtype: bool, optional
    dtype:
    - torch.bool
    ndim:
    - '0'
  reduction:
    default: mean
    descp: 'Specifies the reduction to apply to the output: `''none''` | `''mean''`
      | `''sum''`. `''none''`: no reduction will be applied, `''mean''`: the sum of
      the output will be divided by the number of elements in the output, `''sum''`:
      the output will be summed. Note: `size_average` and `reduce` are in the process
      of being deprecated, and in the meantime, specifying either of those two args
      will override `reduction`. Default: `''mean''`'
    doc_dtype: string, optional
    dtype:
    - int
    - string
    enum:
    - mean
    - none
    - sum
    ndim:
    - '0'
    range:
    - '[0,inf)'
  size_average:
    default: None
    descp: 'Deprecated (see `reduction`). By default, the losses are averaged over
      each loss element in the batch. Note that for some losses, there are multiple
      elements per sample. If the field `size_average` is set to `False`, the losses
      are instead summed for each minibatch. Ignored when reduce is `False`. Default:
      `True`'
    doc_dtype: bool, optional
    dtype:
    - torch.bool
    enum:
    - size_average
    ndim:
    - '0'
  swap:
    default: 'False'
    descp: 'The distance swap is described in detail in the paper Learning shallow
      convolutional feature descriptors with triplet losses by V. Balntas, E. Riba
      et al. Default: `False`.'
    doc_dtype: bool, optional
    dtype:
    - torch.bool
    ndim:
    - '0'
inputs:
  optional:
  - margin
  - p
  - eps
  - swap
  - size_average
  - reduce
  - reduction
  required: []
layer_constructor: true
link: https://pytorch.org/docs/stable/nn.html#torch.nn.TripletMarginLoss
package: torch
target: TripletMarginLoss
title: torch.nn.TripletMarginLoss
version: 1.5.0
