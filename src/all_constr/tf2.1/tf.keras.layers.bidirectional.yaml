aliases:
- tf.compat.v1.keras.layers.Bidirectional
check_nan: true
constraints:
  '**kwargs':
    default: null
    descp: ''
  backward_layer:
    default: None
    descp: Optional `Recurrent` instance to be used to handle backwards input processing.
      If `backward_layer` is not provided, the layer instance passed as the `layer`
      argument will be used to generate the backward layer automatically. Note that
      the provided `backward_layer` layer should have properties matching those of
      the `layer` argument, in particular it should have the same values for `stateful`,
      `return_states`, `return_sequence`, etc. In addition, `backward_layer` and `layer`
      should have different `go_backwards` argument values. A `ValueError` will be
      raised if these requirements are not met.
    ndim:
    - '0'
  layer:
    descp: '`Recurrent` instance.'
  merge_mode:
    default: concat
    descp: Mode by which outputs of the forward and backward RNNs will be combined.
      One of {'sum', 'mul', 'concat', 'ave', None}. If None, the outputs will not
      be combined, they will be returned as a list.
    dtype:
    - tf.string
    enum:
    - ave
    - concat
    - mul
    - sum
    ndim:
    - '0'
    structure:
    - list
  weights:
    default: None
    descp: ''
exceptions:
- ValueError: '1. If `layer` or `backward_layer` is not a `Layer` instance. In case
    of invalid `merge_mode` argument.If `backward_layer` has mismatched properties
    compared to `layer`. '
inputs:
  optional:
  - merge_mode
  - weights
  - backward_layer
  - '**kwargs'
  required:
  - layer
layer_constructor: true
link: https://www.tensorflow.org/versions/r2.1/api_docs/python/tf/keras/layers/Bidirectional
package: tensorflow
target: Bidirectional
title: tf.keras.layers.Bidirectional
version: 2.1.0
